
struct HelloWorlds {
    i i32
}

// Compile C: clang -c main.c -o anobject.o
extern func helloWorldsFunction() *HelloWorlds;

struct FILE {}

extern func fopen(*i8, *i8) *FILE;
extern func fwrite(*i8, i64, i64, *FILE) void;
extern func fclose(*FILE) void;
extern func fread(*i8, i64, i64, *FILE) i64;
extern func rewind(*FILE) i64;
extern func fgets(*i8, i32, *FILE) *i8;
extern func free(*i8) void;

func doStuff() {
    helloWorld := helloWorldsFunction()
    @println(helloWorld.i)
    theFile := fopen("./aFile", "a+");
    rewind(theFile);
    output := @alloc(i8, 300);
    for @cast(i32, fgets(output, 10, theFile)) != 0 {
        @println(output);
    }
    fwrite("hello!", @cast(i64, 1), @cast(i64, 6), theFile);
    free(output);
    fclose(theFile)
}

struct Point {
    x i32
    y i32
}

struct Points {
    points [300]Point
}

struct Player {
    position Point
    rotation i32
    name     *i8
}

func main() {

    float : f32 = 1.2;
    floatCasted : i16 = @cast(i16, float);
    @println(floatCasted);

    player := @Player{
        position: @Point {
            x: 3,
            y: 3,
        },
        rotation: 35,
        name: "Hello world",
    };

    @println(player.name);
    player.position.x = player.position.y + 5;
    @println(player.position.x);


    for i := 0; i <= 100; i = i + 1 {

        @println(i);
        for j := 0; j <= 100; j = j + 1 {
            if i + j <= 10 {
                @println(i + j);
            } else {

            }
        }
    }

    if 1 {
        if 0 {
            @println("notok");
        } else if 0 {
            @println("notok");
        } else if 0 {
            @println("notok");
        } else if 1 {
            @println("ok");
        } else {
            @println("notok");
        }
        @println("nice");
    }

    matrix := [300][300]i32{}
    for i := 0; i < 300; i = i + 1{
        for j := 0; j < 300; j = j + 1 {
            if i == 200 matrix[i][j] = 1;
            else matrix[i][j] = i + j;
        }
    }    
    @println(matrix[200][200]);
    @println(matrix[201][201]);

    isDaniGood := @cast(i1, 1);
    isGabiGood := @cast(i1, 1);
    if 0 if 1 { @println("w") } else {@println("q")} else {@println("e")}
}
