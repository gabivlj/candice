import someModule, i64, "./toImport.cd";
import someModulei32, i32, "./toImport.cd";
import ss, "./string.cd"
import usestring, "./usestring.cd"

struct Thing {
    i i32
}

import creator, Thing, "./generic.cd"
import aoi32, i32, "./array.cd"


func something() someModule.Something {
    return @someModule.Something { integer: @cast(i64, 3) };
}


import callable, func(i32)i32, i32, "./callable.cd"


func wow(i i32) i32 {
    return i
}

func main() {
    str := ss.New("hellow")
    newstring := usestring.UseString(&str)

    array : aoi32.Array = aoi32.New()
    @println(array.elements[0])
    aoi32.Push(&array, 3)
    @println(array.elements[0])

    calledWow := callable.call(wow)
    @println(calledWow) // prints 1
    instance := creator.create();
    @println(instance.i)
    somethingVariable : someModule.Something = someModule.something();
    somethingVariableI32 : someModulei32.Something = someModulei32.something();    
    localSomethingFunction : someModule.Something = something()
    @println(somethingVariableI32.integer + @cast(i32, somethingVariable.integer) + @cast(i32, localSomethingFunction.integer));    
}
